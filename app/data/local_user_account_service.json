{"title":"Local User Account Service","body":"<p>We like using third party authentication services (Github, Google, Twitter, Facebook) as much as possible. In some cases a website demands that users login with a specific username and password. Most often this is required because users are being imported from an old system.</p> <p>Submit a login or registration over https.</p> <p>This is service is limited to providing a login token (think session id or oauth2) that can be used by other API&#39;s to validate that the user is authenticated and provide access to the user information.</p> <p>Essentially, this should be come an oauth2 server.</p> <h2 id=\"ways-of-submitting\">Ways of submitting</h2> <ul> <li>Form post. application/x-www-form-urlencoded</li> <li>Post a json string with the fields. application/json</li> <li>Url arguments.</li> </ul> <h2 id=\"submitted-fields\">Submitted Fields</h2> <ul> <li><strong>source</strong> Optional. If not provided the source defaults to &#39;cape&#39;. Usernames specific to a site? Include the site ID as the source.</li> <li><strong>username</strong> a string representing the user. This will be associated with a CAPE user id. ([a-z][A-Z][0-9]_-.)</li> <li><strong>password</strong> Clear text password. Encryption before database storage happens on the server. If custom hash happened in an old system before being imported (md5) the password needs to come md5 encoded.</li> <li><strong>email</strong> Optional. Used for recovery of the password. Also can be used to validate an account.</li> <li><strong>other</strong>. Other fields...</li> </ul> <h2 id=\"endpoints\">Endpoints</h2> <h3 id=\"user-login-user-login-\">User Login [/user/login]</h3> <p>Send data here to log the user in. Returns 404 type response if the username is not found. Returns 403 if the password doesn&#39;t match. After first two failed password checks on a uid a 1 second delay is added to every subsequent check over the next 24 hours.</p> <h3 id=\"user-registration-user-create-\">User Registration [/user/create]</h3> <p>Password matching must take place on the client side. The password provided is the password that will be used. Create a user based on the fields provided. Returns 409 (?) if the user is found already but password doesn&#39;t match? Will log the user in if the passwords match.</p> <h3 id=\"user-information-user-info-uid-\">User information [/user/info/{uid}]</h3> <p>Request must be authenticated with token provided in [/user/login]. Returns information about the user. <code>email</code> and other.</p> <h3 id=\"user-update-user-update-uid-\">User update [/user/update/{uid}]</h3> <p>Must be authenticated with the token provided in [/user/login]. Post a new json object of fields to update the user with.</p> <h2 id=\"app-flow\">App Flow</h2> <ol> <li>Load the <code>password_salt</code> and <code>uid</code> for a given <code>source:username</code>.</li> <li>Sha256 password with password hash field.</li> <li>Sha256 result with the global salt.</li> <li>Load used object based on the <code>uid</code>.</li> <li>Compare calculated <code>password_hash</code> with <code>password_hash</code> value in database.</li> <li>Provide success or failure to client.</li> </ol> <h2 id=\"data-storage\">Data Storage</h2> <ul> <li><code>source/username</code> : <code>uid</code>, <code>password_salt</code></li> <li><code>uid</code> : <code>email</code>, <code>password_hash</code>, <code>[other]</code></li> <li><code>token</code> : <code>uid</code> - optionally expire token.</li> </ul> "}