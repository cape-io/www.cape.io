---
domain: www.integral-therapy.com # This is not used for anything yet.
uid: 1 # The CAPE user ID to use for authenticating against the providers when requesting resources.

api: # An API is just a set of default information.
  cloudfiles: # Machine name of the API
    provider: cloudfiles # CAPE provider that is defined in providers.yml
    arg: # Default arguments to send to the provider.
      container: www.integral-therapy.com # Cloudfiles container to use.
  content: # Machine name. This is where most of our content should live.
    provider: github
    arg:
      repo: integral-therapy
      owner: sundaysenergy
      branch: master
    load: # Define a way to load the data initially or if data needs to be processed again.
      resource: tree # Resource to use for the provider listed in this API.
      _id: path # Define the _id field. Required. If set as true it expects an array of id values.
      arg:
        recursive: true # We want the entire repo.
        sha: c656945068ed528e641739fdbc14930de8b6d27a # Not yet sure how to get this dynamically.

# As content is added or updated it is sent through the make file.
view: # This is the most important part.
  # CAPE checks to see if content belongs to a view based on the filter criteria.
  data: # Machine name of the view.
    filter:
      api: content # An API is a bunch of default values about where the content comes from.
      must: # If you filter against a field that isn't set it will try to find it (and load) that field.
        _id: data.yaml # The most basic. Match the path field with the value 'data.yaml'.
    field: # We need to load the raw file and parse it.
      _self: # _self is used to overwrite the object passed to cape (since it need only be an ID).
        api: content # Default values for provider and arguments to load the stuff.
        resource: raw # What provider resource should we use.
        type: yaml # What to do with the result. Parse the yaml into a native hash/object/dict.

    display: # Define various displays. A display is a way to render the view.
      default: # Machine name of the display.
        style: page # What we should do with this display. A page is expected to be saved somewhere.
        type: json # What format to save the data in.
        destination: # Where to save the page.
          api: cloudfiles # Send it to cloudfiles. API contains the default container.
          resource: upload # How to send it? By using the upload method.
          arg: # The upload method wants to know where to save it.
            file: /data.json # Save it so it is accessible be visiting {container_name}/data.json

  staff: # A listing of staff profiles.
    filter:
      api: content # github content repo for the site.
      must:
        _id: # The ID is the only required field.
          # ID is a string, not an object. Because of that the fields are actually methods.
          dirname: staff # Files must be in the /staff directory. Parses the ID and extracts the directory structure.
          ext: .md # Files must have .md extension. Parses ID for file extension.
    field: # These fields should be what is required for filtering or what is needed in more than one display.
      _self: # Things like git commit hook and load resource tree do not contain the file contents.
        api: content # API is just an alias of provider and provider arguments.
        resource: raw # The provider resource to use.
        type: md # What to do with the result. Markdown with YAML frontmatter processor.
        arg:
          path: '{{&_id}}'
    sort: # Define how to sort the view entities.
      field: order # Look for the order field.
      default: "0" # Default sort value.
      order: ascending
    display:
      default: # the machine name of the display.
        style: page # General style of the display. Tells CAPE what to do with it. (page, file, block)
        type: html # Type of page. html allows a template variable. See below.
        template: # The page style requires the template attribute.
          api: content # Where do we get the layout file from?
          id: theme/staff.html # What ID does the layout file have?
          convert: mustache # What type of conversion should we do?
        field: # Fields for this display. img_info is used for defining height and width attributes on the img tag.
          img_info: # Yaml contains an imagefield. Expand it into more info. I want the dimensions.
            provider: wget # Generic provider that just calls a specific url.
            resource: json # The json resource expects json and converts it programming language native table/hash/object.
            arg: # Only need to pass it the url argument. This uses our img.labori.us service.
              url: 'http://raw.github.com.img.labori.us/info/115x155/sundaysenergy/integral-therapy/master/staff/{{photo}}?https=true'
        destination: # Save the page.
          api: cloudfiles # Where to send the display.
          resource: upload # Resources are like methods. Upload it.
          arg: # We are going to save this partial page with an underscore.
            file: /credentials/_index.html # This makes it available to client js or as part of the content "API".
      img: # view machine name
        style: file # File outputs a file for *each* entity in the view.
        type: image # The type of file. Not sure the importance of this yet. Maybe the content-type header.
        # Using the file style requires a source field. I think.
        source: # Use source to load an external resource using values from the entity fields.
          provider: wget # Grab the contents of a url.
          resource: raw # Do not process the result.
          arg: # The url to grab.
            url: 'http://raw.github.com.img.labori.us/115x155/sundaysenergy/integral-therapy/master/staff/{{photo}}?https=true'
        pager: # Just for example.
          entities_per: 1 # This is the default for style: file
        destination: # Save each file.
          api: cloudfiles # Remember, API just defines a provider and default argumnets.
          resource: upload
          arg:
            file: '/credentials/{{image}}'
      index: # The default display is just a partial. This helps us create the full page.
        style: page # Single page.
        type: html # Will be html.
        field: # You can add fields to a specific display. These fields are not available during filtering.
          # The most basic field definition is just a text string.
          title: Minneapolis Psychologist - Dr. David Thompson
          content: # The content field will be populated with...
            display: default # The result of the default display in this view.
          data: # Define the field data as...
            view: data # The content from the data view.
            display: false # Do not render the output. Just access it as variables available to mustache.
          navigation: # The navigation variable will be the output from the default display on the navigation view.
            view: navigation # Instead of using this view use a different one.
            display: default # The display to use.
        destination: # What to do with the page.
          api: cloudfiles
          resource: upload # Upload it to cloud files.
          arg:
            file: /credentials/index.html # At this file address.
        template: # Send the field variables through the mustache converter.
          api: content
          id: theme/default.html
          convert: mustache

  navigation:
    filter:
      api: content
      must:
        _id: navigation.yaml
    field: # We need to load the raw file and parse it.
      _self: # _self is used to overwrite the object passed to CAPE (since it need only be an ID).
        api: content # Default values for provider and arguments to load the stuff.
        resource: raw # What provider resource should we use.
        type: yaml # What to do with the result. Parse the yaml into a native hash/object/dict.
        arg:
          path: '{{&_id}}'
    display: # Define various displays. A display is a way to render the view.
      default: # Machine name of the display.
        style: page # What we should do with this display. A page is expected to be saved somewhere.
        type: html # What format to save the data in.
        template: # The page style requires the template attribute.
          api: content # Where do we get the layout file from?
          id: theme/navigation.html # What ID does the layout file have?
          convert: mustache # What type of conversion should we do?
        destination: # Where to save the page.
          api: cloudfiles # Send it to cloudfiles. API contains the default container.
          resource: upload # How to send it? By using the upload method.
          arg: # The upload method wants to know where to save it.
            file: /_navigation.html # Save it so it is accessible be visiting {container_name}/_navigation.html

  layout:
    filter:
      api: content
      must:
        _id:
          dirname: theme/layouts
          ext: .html

