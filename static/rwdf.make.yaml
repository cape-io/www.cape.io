---
domain: www.rwdfoundation.org # This is not used for anything yet.
uid: 1 # The CAPE user ID to use for authenticating against the providers when requesting API resources.

api: # An API is just a set of default information.
  cloudfiles: # Used for uploads to the CDN used for the website.
    provider: cloudfiles
    arg:
      container: www.rwdfoundation.org
  content: # Used to get content from github.
    provider: github
    arg:
      repo: rwdfruhoh.ookb.co
      owner: bjornmeansbear
      branch: master
    # CAPE only listens for new or changed content.
    load: # To load previously created content from this API you need to specificy the load param.
      resource: tree # Github has a nice index of all content in a repo.
      _id: path
      arg:
        recursive: true # Thankfully they have an option to get results recursively.
        sha: 819478b5bdf41a8733ee3915bfefdf23373476b5 # Only problem is having to update the sha.
        # Will likely create something to auto get the sha in the future. Perhaps getting the args from another view.
view:
  homepage: # (dek, hed, legacy, tellus)
    style: set # We want to be able to do stuff like {{homepage.dek}} so we save it as a set instead of an array.
    # A set has key/value pairs. What field should we use for the key?
    set_key: _filename # _filename is an autocreated field based on the _id field.
    filter:
      api: content
      must:
        _id: # We only want content in the homepage directory.
          dirname: homepage
          ext: .md # With the .md extension.
    field: # The base "entity" in CAPE is the _id field. That's it.
      # To get the contents of the file we need to add a "meta-field"
      _self: # _self is a special meta-field that will place its own fields within the base context.
        api: content # The _self field is processed first.
        resource: raw # This just defines what API at github to use.
        type: md # This tells CAPE what to do with the file that it gets. 'md' converts the yaml into an object and content into html.
        arg:
          path: '{{&_id}}' # The raw github API call requires a path param.

  frontpage: # Used to generate the middle area of the homepage.
    style: list
    filter: # What entities belong in this view?
      api: content # Entities in this view must come from the github repo.
      must: # Should can contain many requirements. Min match is 1.
        _id: # The value for the _id field is set in the API above.
          dirname: [whatwedo, spruceups] # An array is like an OR within should.
          ext: .md # Just to be safe. Don't want to process images or anything else random.
    field: # The base "entity" in CAPE is the _id field. That's it.
      # To get the contents of the file we need to add a "meta-field"
      _self: # _self is a _special_ field that will place its fields within the base context.
        api: content # The _self field is processed first.
        resource: raw # This just defines what API at github to use.
        type: md # This tells CAPE what to do with the file that it gets. 'md' converts the yaml into an object and content into html.
        arg:
          path: '{{&_id}}' # The raw github API call requires a path param.
      _list: false # Adding a default value to the _list field. '_list' should be a special field somehow. Maybe it should be _published
    sort:
      field: sort # Sort field
      order: ascending
      default: 1 # Set default value.

    display: # The fun part. A Display defines what to do with the data.

      feature: # Create a display that contains only published entities.
        style: object # Single result.
        limit: 1 # Only want one result.
        offset: 0 # No offset. Get the first one.

      other:
        style: object # Single entity.
        limit: 1 # Only want one entity.
        offset: 1 # Skip 1 entity.

      triptych:
        style: list # An array of entities.
        limit: 3 # Limit to three.
        offset: 2 # Skip the first 2 in the results from the view.

      _index: # Time to put it all together.
        field: # Define what is available to the template.
          feature: true # True says that the field is the name of a display in this view.
          other: true # The display in this view called other.
          triptych: true # The display called triptych in this view.
          homepage: # (dek, hed, legacy, tellus)
            view: homepage # Get all the entities from the homepage view.
        style: page # Save this as a page.
        type: html # The page has the html format.
        template: # We want to pass the fields of this display to a template.
          api: content # Where to get the template from?
          resource: raw # Use the github raw to load a file.
          arg: # What args to pass the API
            path: _cape/homepage.mustache # Define the file path.
          convert: mustache # What conversion process do we use.
        destination: # What do we do with the generated file?
          api: cloudfiles # Send it off somewhere using the API definition above.
          resource: upload # Upload the file.
          arg: # Override the API arg values above with those below.
            file: /_index.html # Tells the API what filename to give this file.

      admin:
        style: page
        type: html
        template:
          api: content
          resource: raw
          arg:
            path: _cape/projects.mustache
          convert: mustache
        destination:
          api: cloudfiles
          resource: upload
          arg:
            file: /frontpage/admin.html
